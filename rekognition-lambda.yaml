AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Rekognition face detection logic
Resources:
  indexFaces:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index_faces.lambda_handler
      Runtime: python2.7
      CodeUri: ./rekognition-lambda
      Description: An Amazon S3 trigger that indexes faces into rekognition
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          FACE_COLLECTON: "virtual-concierge"
          FACE_DDB_TABLE: "virtual-concierge-face"
      Role:
        Fn::GetAtt:
        - RekognizeLambdaIAMRole
        - Arn
      Events:
        BucketObjectCreated:
          Type: S3
          Properties:
            Bucket:
              Ref: IndexBucket
            Events:
              - 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: index/
                  - Name: suffix
                    Value: jpg
      Tags:
        'lambda-console:blueprint': rekognition-python
  detectFaces:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: detect_faces.lambda_handler
      Runtime: python2.7
      CodeUri: ./rekognition-lambda
      Description: An Amazon S3 trigger that uses rekognition APIs to detect faces
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          FACE_COLLECTON: "virtual-concierge"
          FACE_DDB_TABLE: "virtual-concierge-face"
          FACE_THRESHOLD: 80
          FACE_URL_TTL: 3600
          FACE_TOPIC_ARN: "arn:aws:sns:ap-southeast-2:882607831196:virtual-concierge-face"
      Role:
        Fn::GetAtt:
        - RekognizeLambdaIAMRole
        - Arn
      Events:
        BucketObjectCreated:
          Type: S3
          Properties:
            Bucket:
              Ref: FrameBucket
            Events:
              - 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: faces/
                  - Name: suffix
                    Value: jpg
      Tags:
        'lambda-console:blueprint': rekognition-python
  FrameBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: 'BucketOwnerFullControl'
      BucketName: 'virtual-concierge-frames-ap-southeast-2'
  IndexBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: 'BucketOwnerFullControl'
      BucketName: 'virtual-concierge-index-ap-southeast-2'
  IndexTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "RekognitionId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "RekognitionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "virtual-concierge-face"
  FaceTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Recognized Face"
      TopicName: virtual-concierge-face
  BadgeTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Found Badge Name"
      TopicName: virtual-concierge-badge
  RekognizeLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      RoleName: 'virtual-concierge-lambdarekognitionrole'
